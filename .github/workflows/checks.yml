name: Repro Checks
on:
  workflow_call:
    inputs:
      model-name:
        type: string
        required: true
        description: The name of the model to check for reproducibility
      config-tag:
        type: string
        required: true
        description: A tag on an associated config branch to use for the reproducibility run
      environment-name:
        type: string
        required: true
        description: The name of a GitHub Deployment Environment that is inherited from the caller
      test-markers:
        type: string
        required: true
        description: A python expression of markers to pass to the reproducibility pytests
    outputs:
      artifact-name:
        value: ${{ jobs.repro.outputs.artifact-name }}
        description: Name of the artifact containing the checksums and test report for this repro run
      experiment-location:
        value: ${{ jobs.repro.outputs.experiment-location }}
        description: Location of the experiment on the target environment
env:
  TEST_OUTPUT_LOCAL_LOCATION: /opt/test-output
jobs:
  repro:
    # NOTE: A lot of these `vars` and `secrets` are not found in this repository. Instead, they are inherited
    # from the calling workflow (for example, `ACCESS-NRI/access-om2-configs`)
    name: Run ${{ github.ref_name }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment-name }}
    outputs:
      artifact-name: ${{ steps.artifact.outputs.name }}
      experiment-location: ${{ steps.run.outputs.experiment-location }}
    env:
      TEST_OUTPUT_LOCATION: ${{ vars.TEST_OUTPUT_LOCATION }}/${{ inputs.model-name }}/${{ inputs.config-tag }}/
      EXPERIMENT_LOCATION: ${{ vars.EXPERIMENTS_LOCATION }}/${{ inputs.model-name }}/${{ inputs.config-tag }}
    steps:
      - name: Checkout Configs Repo
        # for test framework - note that this one is ACCESS-OM2 specific
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup SSH
        id: ssh
        uses: access-nri/actions/.github/actions/setup-ssh@main
        with:
          hosts: |
            ${{ secrets.SSH_HOST }}
            ${{ secrets.SSH_HOST_DATA }}
          private-key: ${{ secrets.SSH_KEY }}

      - name: Run configuration
        id: run
        env:
          BASE_EXPERIMENT_LOCATION: ${{ env.EXPERIMENT_LOCATION }}/base-experiment
        run: |
          ssh -i ${{ steps.ssh.outputs.private-key-path }} /bin/bash<<EOT

          # Update test directory
          git -C ${{ vars.REPRO_TEST_LOCATION }} pull

          # Load payu
          module use ${{ vars.PAYU_MODULE_LOCATION }}
          module load payu/${{ vars.PAYU_VERSION }}

          # Remove base experiment if it already exists
          if [ -d "${{ env.BASE_EXPERIMENT_LOCATION }}" ]; then
            rm -rf ${{ env.BASE_EXPERIMENT_LOCATION }}
          fi

          # Setup a base experiment
          git clone ${{ github.event.repository.clone_url }} ${{ env.BASE_EXPERIMENT_LOCATION }}
          cd ${{ env.BASE_EXPERIMENT_LOCATION }}
          git checkout ${{ inputs.config-tag }}

          # Run pytests - this also generates a CHECKSUM file
          pytest ${{ vars.REPRO_TEST_LOCATION }} -s \
            -m "${{ inputs.test-markers }}" \
            --output-path ${{ env.EXPERIMENT_LOCATION }} \
            --junitxml=${{ env.EXPERIMENT_LOCATION }}/test_report.xml

          # Copy checksum file and test report over
          mkdir -p ${{ env.TEST_OUTPUT_LOCATION }}
          cp ${{ env.EXPERIMENT_LOCATION }}/CHECKSUM ${{ env.TEST_OUTPUT_LOCATION }}
          cp ${{ env.EXPERIMENT_LOCATION }}/test_report.xml ${{ env.TEST_OUTPUT_LOCATION }}
          EOT
          echo "experiment-location=${{ env.EXPERIMENT_LOCATION }}" >> $GITHUB_OUTPUT

      - name: Copy Back Checksums and Test Report
        run: |
          rsync -e 'ssh -i ${{ steps.ssh.outputs.private-key-path }}' \
              '${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_DATA }}:${{ env.TEST_OUTPUT_LOCATION }}' \
              ${{ env.TEST_OUTPUT_LOCAL_LOCATION }}

      - name: Generate Test Output Artifact Name
        id: artifact
        run: echo "name=${{ inputs.model-name }}-${{ inputs.config-tag }}" >> $GITHUB_OUTPUT

      - name: Upload Test Output
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.name }}
          if-no-files-found: error
          path: ${{ env.TEST_OUTPUT_LOCAL_LOCATION }}
